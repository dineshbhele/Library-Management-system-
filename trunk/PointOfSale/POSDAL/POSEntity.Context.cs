//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POSDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PointOfSaleEntities : DbContext
    {
        public PointOfSaleEntities()
            : base("name=PointOfSaleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ConfigChoice> ConfigChoices { get; set; }
        public DbSet<ConfigChoiceCategory> ConfigChoiceCategories { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<DateConversion_TblNepaliCalender> DateConversion_TblNepaliCalender { get; set; }
        public DbSet<Grade> Grades { get; set; }
        public DbSet<ResourceAuthor> ResourceAuthors { get; set; }
        public DbSet<ResourceCopy> ResourceCopies { get; set; }
        public DbSet<ResourceGeneration> ResourceGenerations { get; set; }
        public DbSet<ResourcePublication> ResourcePublications { get; set; }
        public DbSet<ResourceSetup> ResourceSetups { get; set; }
        public DbSet<ResourceSubscriber> ResourceSubscribers { get; set; }
        public DbSet<ResourceType> ResourceTypes { get; set; }
        public DbSet<Subject> Subjects { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<webpages_UsersInRoles> webpages_UsersInRoles { get; set; }
        public DbSet<ResourceIssue> ResourceIssues { get; set; }
    
        public virtual ObjectResult<string> EnglishDateToNepali(string englishDate)
        {
            var englishDateParameter = englishDate != null ?
                new ObjectParameter("englishDate", englishDate) :
                new ObjectParameter("englishDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EnglishDateToNepali", englishDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> NepaliDateToEnglish(string nepaliDate)
        {
            var nepaliDateParameter = nepaliDate != null ?
                new ObjectParameter("nepaliDate", nepaliDate) :
                new ObjectParameter("nepaliDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("NepaliDateToEnglish", nepaliDateParameter);
        }
    
        public virtual ObjectResult<SpGetTransactionPayments_Result> SpGetTransactionPayments(Nullable<int> transactionId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransactionPayments_Result>("SpGetTransactionPayments", transactionIdParameter);
        }
    
        public virtual ObjectResult<SpGetTransactions_Result> SpGetTransactions(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionType, Nullable<int> party, Nullable<int> createdBy, Nullable<bool> isActive)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            var partyParameter = party.HasValue ?
                new ObjectParameter("party", party) :
                new ObjectParameter("party", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransactions_Result>("SpGetTransactions", fromDateParameter, toDateParameter, transactionTypeParameter, partyParameter, createdByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SpGetTransactionsLedger_Result> SpGetTransactionsLedger(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionType, Nullable<int> party, Nullable<int> createdBy)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            var partyParameter = party.HasValue ?
                new ObjectParameter("party", party) :
                new ObjectParameter("party", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransactionsLedger_Result>("SpGetTransactionsLedger", fromDateParameter, toDateParameter, transactionTypeParameter, partyParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SpGetUserList_Result> SpGetUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserList_Result>("SpGetUserList");
        }
    
        public virtual ObjectResult<SpGetUsers_Result> SpGetUsers(string userRole)
        {
            var userRoleParameter = userRole != null ?
                new ObjectParameter("userRole", userRole) :
                new ObjectParameter("userRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUsers_Result>("SpGetUsers", userRoleParameter);
        }
    
        public virtual int SpGetMonthWiseTransaction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetMonthWiseTransaction");
        }
    
        public virtual ObjectResult<SpGetStockLedger_Result> SpGetStockLedger(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionType, Nullable<int> createdBy, Nullable<int> goodsId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("transactionType", transactionType) :
                new ObjectParameter("transactionType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var goodsIdParameter = goodsId.HasValue ?
                new ObjectParameter("goodsId", goodsId) :
                new ObjectParameter("goodsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockLedger_Result>("SpGetStockLedger", fromDateParameter, toDateParameter, transactionTypeParameter, createdByParameter, goodsIdParameter);
        }
    }
}
