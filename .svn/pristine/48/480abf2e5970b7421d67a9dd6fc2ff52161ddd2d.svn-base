using POSDAL;
using POSModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WebMatrix.WebData;

namespace POSBLL
{
    public class SetupService : ISetupService
    {
        PointOfSaleEntities _context;

        ReturnMessageModel rModel;

        public SetupService()
        {
            rModel = new ReturnMessageModel();
            _context = new PointOfSaleEntities();
        }

        #region ConfigChoiceCategory
        public List<ConfigChoiceCategoryModel> GetConfigChoiceCategoryList()
        {
            return _context.ConfigChoiceCategories.Select(x => new ConfigChoiceCategoryModel
            {
                CategoryId = x.CategoryId,
                Category = x.Category,
                CategoryNepali = x.CategoryNepali,
                CategoryDescription = x.CategoryDescription,
                IsActive = x.IsActive
            }).ToList();
        }
        public ReturnMessageModel CreateEditConfigChoiceCategory(ConfigChoiceCategoryModel iModel)
        {
            try
            {
                var cccRow = _context.ConfigChoiceCategories.Where(x => x.CategoryId == iModel.CategoryId).FirstOrDefault();
                if (cccRow == null)
                {
                    cccRow = new ConfigChoiceCategory();
                }

                cccRow.Category = iModel.Category;
                cccRow.CategoryNepali = iModel.CategoryNepali;
                cccRow.CategoryDescription = iModel.CategoryDescription;
                cccRow.IsActive = iModel.IsActive;
                if (cccRow.CategoryId == 0)
                {
                    _context.ConfigChoiceCategories.Add(cccRow);
                    _context.SaveChanges();
                }
                else
                {
                    _context.ConfigChoiceCategories.Attach(cccRow);
                    _context.Entry(cccRow).State = EntityState.Modified;
                    _context.SaveChanges();
                }

                rModel.Msg = "ConfigChoiceCategory Saved Successfully!!";
                rModel.Success = true;
                return rModel;
            }
            catch (Exception ex)
            {
                rModel.Msg = "ConfigChoiceCategory Save Failed!!";
                rModel.Success = false;
                return rModel;
            }
        }
        #endregion

        #region ConfigChoice
        public List<ConfigChoiceModel> GetConfigChoiceList(int CategoryId)
        {
            return (from cc in _context.ConfigChoices
                    join ccc in _context.ConfigChoiceCategories on cc.CategoryId equals ccc.CategoryId
                    where cc.CategoryId == CategoryId
                    select new ConfigChoiceModel
                     {
                         ChoiceId = cc.ChoiceId,
                         CategoryId = cc.CategoryId,
                         CategoryName = ccc.Category,
                         Choice = cc.Choice,
                         ChoiceNepali = cc.ChoiceNepali,
                         ChoiceDescription = cc.ChoiceDescription,
                         Val = cc.Val,
                         IsActive = cc.IsActive
                     }).ToList();
        }
        public ReturnMessageModel CreateEditConfigChoice(ConfigChoiceModel model)
        {
            try
            {
                var ccRow = _context.ConfigChoices.Where(x => x.ChoiceId == model.ChoiceId).FirstOrDefault();
                if (ccRow == null)
                {
                    ccRow = new ConfigChoice();
                }

                ccRow.CategoryId = model.CategoryId;
                ccRow.Choice = model.Choice;
                ccRow.ChoiceNepali = model.ChoiceNepali;
                ccRow.ChoiceDescription = model.ChoiceDescription;
                ccRow.Val = model.Val;
                ccRow.IsActive = model.IsActive;
                if (ccRow.ChoiceId == 0)
                {
                    _context.ConfigChoices.Add(ccRow);
                    _context.SaveChanges();
                }
                else
                {
                    _context.ConfigChoices.Attach(ccRow);
                    _context.Entry(ccRow).State = EntityState.Modified;
                    _context.SaveChanges();
                }

                rModel.Msg = "ConfigChoice Saved Successfully!!";
                rModel.Success = true;
                return rModel;
            }
            catch (Exception ex)
            {
                rModel.Msg = "ConfigChoice Save Failed!!";
                rModel.Success = false;
                return rModel;
            }
        }
        #endregion

        //#region DownloadPublication
        //public List<DownloadPublicationModel> GetDownloadPublicationList()
        //{
        //    return _context.Download_Publication.Select(x => new DownloadPublicationModel
        //    {
        //        Id = x.Id,
        //        DownloadCaptionEnglish = x.DownloadCaptionEnglish,
        //        DownloadCaptionNepali = x.DownloadCaptionNepali,
        //        IsDownloads=x.IsDownloads,
        //        IsActive=x.IsActive,
        //        FileLocation = x.FileLocation,
        //        CreatedBy=x.CreatedBy,
        //        CreatedDate=x.CreatedDate
        //    }).OrderByDescending(x=>x.CreatedDate).ToList();
        //}
        //public ReturnMessageModel CreateEditDownloadPublication(DownloadPublicationModel dpModel)
        //{
        //    try
        //    {
        //        var dpRow = _context.Download_Publication.Where(x => x.Id == dpModel.Id).FirstOrDefault();
        //        if (dpRow == null)
        //        {
        //            dpRow = new Download_Publication();
        //        }

        //        dpRow.Id = dpModel.Id;
        //        dpRow.DownloadCaptionEnglish = dpModel.DownloadCaptionEnglish;
        //        dpRow.DownloadCaptionNepali = dpModel.DownloadCaptionNepali;

        //        dpRow.IsDownloads = dpModel.IsDownloads;
        //        dpRow.IsActive = dpModel.IsActive;
        //        if (dpRow.Id == 0)
        //        {
        //            dpRow.FileLocation = dpModel.FileLocation;
        //            dpRow.CreatedDate = DateTime.Now;
        //            dpRow.CreatedBy = WebSecurity.CurrentUserId;
        //            _context.Download_Publication.Add(dpRow);
        //            _context.SaveChanges();
        //        }
        //        else
        //        {
        //            if (dpModel.ImageChange)
        //            {
        //                dpRow.FileLocation = dpModel.FileLocation;
        //            }
        //            _context.Download_Publication.Attach(dpRow);
        //            _context.Entry(dpRow).State = EntityState.Modified;
        //            _context.SaveChanges();
        //        }

        //        rModel.Msg = "Download Publication Saved Successfully!!";
        //        rModel.Success = true;
        //        return rModel;
        //    }
        //    catch (Exception ex)
        //    {
        //        rModel.Msg = "DownloadPublication Save Failed!!";
        //        rModel.Success = false;
        //        return rModel;
        //    }
        //}
        //#endregion



        //roles
        #region roles
        public List<RoleModel> GetRoleList()
        {
            List<RoleModel> rList = _context.Database.SqlQuery<RoleModel>("Select RoleId,RoleName from webpages_Roles").ToList();
            return rList;

        }

        public ReturnMessageModel CreateEditUserRoles(RoleModel roModel)
        {
            try
            {

                if (roModel.RoleId == 0)
                {
                    _context.Database.ExecuteSqlCommand("insert into webpages_Roles (RoleName) VALUES ('" + roModel.RoleName + "')");
                    // var role = _context.Database.SqlQuery<RoleModel>("select * from webpages_Roles where UniqueId='" + roModel.UniqueId + "'").FirstOrDefault();
                    rModel.Msg = "Role Successfully Saved!";
                }
                else
                {
                    _context.Database.ExecuteSqlCommand("update webpages_Roles set [RoleName]='" + roModel.RoleName + "' where RoleId= " + roModel.RoleId);
                    //var role = _context.Database.SqlQuery<RoleModel>("select * from webpages_Roles where UniqueId='" + roModel.UniqueId + "'").FirstOrDefault();
                    rModel.Msg = "Role Updated Successfully!";
                }
                rModel.Success = true;
                return rModel;
            }

            catch (Exception ex)
            {
                rModel.Msg = " Saving Role Failed!!";
                rModel.Success = false;
                return rModel;
            }
        }
        #endregion


       
        #region Grade
        public List<GradeModel> GetGradeList()
        {
            return _context.Grades.Select(x => new GradeModel
            {
               Id=x.Id,
               GradeNameEng=x.GradeNameEng,
               GradeNameNep=x.GradeNameNep,
               Remarks=x.Remarks,
               CreatedBy=x.CreatedBy,
               CreatedDate=x.CreatedDate,
               UpdatedBy=x.UpdatedBy,
               UpdatedDate=x.UpdatedDate
               
            }).ToList();
        }


        public ReturnMessageModel CreateGrade(GradeModel gModel)
        {
            try
            {
                var ccRow = _context.Grades.Where(x => x.Id == gModel.Id).FirstOrDefault();
                if (ccRow == null)
                {
                    ccRow = new Grade();
                }

                ccRow.Id=gModel.Id;
               ccRow.GradeNameEng=gModel.GradeNameEng;
               ccRow.GradeNameNep=gModel.GradeNameNep;
               ccRow.Remarks=gModel.Remarks;
               ccRow.CreatedBy=gModel.CreatedBy;
               ccRow.CreatedDate=gModel.CreatedDate;
               ccRow.UpdatedBy = gModel.UpdatedBy;
               ccRow.UpdatedDate = gModel.UpdatedDate;
               

                if (ccRow.Id == 0)
                {
                    ccRow.CreatedBy = WebSecurity.CurrentUserId;
                    ccRow.CreatedDate = System.DateTime.Now;
                    _context.Grades.Add(ccRow);
                    _context.SaveChanges();

                }
                else
                {
                    ccRow.UpdatedBy = WebSecurity.CurrentUserId;
                    ccRow.UpdatedDate = System.DateTime.Now;
                    _context.Grades.Attach(ccRow);
                    _context.Entry(ccRow).State = EntityState.Modified;
                    _context.SaveChanges();
                }

                rModel.Msg = "Grade Saved Successfully";
                rModel.Success = true;
                return rModel;
            }
            catch (Exception ex)
            {
                rModel.Msg = "Grade Saved Failed";
                rModel.Success = false;
                return rModel;

            }

        }
        
        #endregion

        
    }
}
