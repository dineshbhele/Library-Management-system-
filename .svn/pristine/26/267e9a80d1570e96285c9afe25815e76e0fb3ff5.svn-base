using POSModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using POSBLL.Interface;
using POSBLL.Services;
using POSDAL;

namespace PointOfSale.Controllers
{
    public class ResourceController : Controller
    {
        IResourceInterface _iResourceService;
        ICountryInterface _iCountry;
        IResourceAuthorInterface _iResourceAuthorService;
        IResourcePublicationInterface _iResourcePublicationService;
        ReturnMessageModel rModel;
        PointOfSaleEntities context;
       

        public ResourceController()
        {
            _iResourceService = new ResourceService();
            _iCountry = new CountryService();
            _iResourceAuthorService = new ResourceAuthorService();
            _iResourcePublicationService = new ResourcePublicationService();
            rModel = new ReturnMessageModel();
            context = new PointOfSaleEntities();
        }

        public ActionResult ResourceTypeIndex()
        {
            ResourceTypeModel db = new ResourceTypeModel();
            db.ResourceTypeList = _iResourceService.GetResourceTypeList();
            return View(db);
        }
 
        public ActionResult CreateEditResourceType(int? resourceTypeId)
        {
            ResourceTypeModel rtModel = new ResourceTypeModel();
            if (resourceTypeId != null)
            {
                rtModel = _iResourceService.GetResourceTypeList().Where(x => x.ResourceTypeId == resourceTypeId).FirstOrDefault();
            }
            return PartialView("_CreateEditResourceType",rtModel);
        }

        

        [HttpPost]
        public ActionResult CreateEditResourceType(ResourceTypeModel rtModel)
        {
            if (ModelState.IsValid)
            {
                var result = _iResourceService.CreateEditResourceType(rtModel);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(rModel, JsonRequestBehavior.AllowGet);
            }
        }

       

        public ActionResult CountryIndex()
        {
            CountryModel db = new CountryModel();
            db.CountryList = _iCountry.GetCountryList();
            return View(db);
        }

        public ActionResult CreateEditCountry(int? CountryId)
        {
            CountryModel cModel = new CountryModel();
            if (CountryId != null)
            {
                cModel = _iCountry.GetCountryList().Where(x => x.CountryId == CountryId).FirstOrDefault();
            }
            return PartialView("_CreatedEditCountry", cModel);
        }

        [HttpPost]
        public ActionResult CreateEditCountry(CountryModel cModel)
        {
            if (ModelState.IsValid)
            {
                var result = _iCountry.CreateEditCountry(cModel);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(rModel, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ResourceAuthorIndex()
        {
            ResourceAuthorModel db = new ResourceAuthorModel();
            db.ResourceAuthorList = _iResourceAuthorService.GetResourceAuthorList();
            return View(db);
        }

        

        public ActionResult CreateEditResourceAuthor(int? AuthorId)
        {
            ResourceAuthorModel raModel = new ResourceAuthorModel();
            var NationalityList = context.Countries.Select(x => new CountryModel
            {
                CountryId = x.CountryId,
                CountryName = x.CountryName

            }).ToList();
            ViewBag.CountryName = new SelectList(NationalityList, "CountryId", "CountryName");

            if (AuthorId != null)
            {
                raModel = _iResourceAuthorService.GetResourceAuthorList().Where(x => x.AuthorId == AuthorId).FirstOrDefault();
            }
           
            return PartialView("_CreateEditResourceAuthor", raModel);
        }

        [HttpPost]
        public ActionResult CreateEditResourceAuthor(ResourceAuthorModel raModel)
        {
            if (ModelState.IsValid)
            {
                var result = _iResourceAuthorService.CreateEditResourceAuthor(raModel);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(rModel, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ResourcePublicationIndex()
        {
            ResourcePublicationModel db = new ResourcePublicationModel();
            db.ResourcePublicationList = _iResourcePublicationService.GetResourcePublicationList();
            return View(db);
        }

        public ActionResult CreateEditResourcePublication(int? PublicationId)
        {
            ResourcePublicationModel rpModel = new ResourcePublicationModel();

            var PublisherOriginList = context.Countries.Select(x => new CountryModel
            {
                CountryId = x.CountryId,
                CountryName = x.CountryName

            }).ToList();
            ViewBag.CountryName = new SelectList(PublisherOriginList, "CountryId", "CountryName");

            if (PublicationId != null)
            {
                rpModel = _iResourcePublicationService.GetResourcePublicationList().Where(x => x.PublicationId == PublicationId).FirstOrDefault();
            }
            return PartialView("_CreateEditResourcePublication", rpModel);
        }

        [HttpPost]
        public ActionResult CreateEditResourcePublication(ResourcePublicationModel rpModel)
        {
            if (ModelState.IsValid)
            {
                var result = _iResourcePublicationService.CreateEditResourcePublication(rpModel);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(rModel, JsonRequestBehavior.AllowGet);
            }
        }
    }
}
